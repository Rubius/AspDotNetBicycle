/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.7.0 (NJsonSchema v10.6.7.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
// @ts-nocheck

import { BaseApiClient } from './BaseApiClient';
import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class BicycleApiClient extends BaseApiClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        super();

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7058";

    }

    getAll(  cancelToken?: CancelToken | undefined): Promise<ShortBicycleDto[]> {
        let url_ = this.baseUrl + "/api/bicycles";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<ShortBicycleDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ShortBicycleDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<ShortBicycleDto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ShortBicycleDto[]>(null as any);
    }

    create(command: CreateBicycleCommand , cancelToken?: CancelToken | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/bicycles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<number> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201: any = null;
            let resultData201  = _responseText;
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return Promise.resolve<number>(result201);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number>(null as any);
    }

    get(bicycleId: number , cancelToken?: CancelToken | undefined): Promise<FullBicycleDto> {
        let url_ = this.baseUrl + "/api/bicycles/{bicycleId}";
        if (bicycleId === undefined || bicycleId === null)
            throw new Error("The parameter 'bicycleId' must be defined.");
        url_ = url_.replace("{bicycleId}", encodeURIComponent("" + bicycleId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<FullBicycleDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = FullBicycleDto.fromJS(resultData200);
            return Promise.resolve<FullBicycleDto>(result200);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FullBicycleDto>(null as any);
    }

    update(bicycleId: number, command: UpdateBicycleCommand , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/bicycles/{bicycleId}";
        if (bicycleId === undefined || bicycleId === null)
            throw new Error("The parameter 'bicycleId' must be defined.");
        url_ = url_.replace("{bicycleId}", encodeURIComponent("" + bicycleId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    delete(bicycleId: number, command: DeleteBicycleCommand , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/bicycles/{bicycleId}";
        if (bicycleId === undefined || bicycleId === null)
            throw new Error("The parameter 'bicycleId' must be defined.");
        url_ = url_.replace("{bicycleId}", encodeURIComponent("" + bicycleId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "DELETE",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export class BicycleModelsApiClient extends BaseApiClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        super();

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7058";

    }

    getAll(  cancelToken?: CancelToken | undefined): Promise<BicycleModelDto[]> {
        let url_ = this.baseUrl + "/api/bicycleModels";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<BicycleModelDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BicycleModelDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<BicycleModelDto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BicycleModelDto[]>(null as any);
    }

    create(command: CreateBicycleModelCommand , cancelToken?: CancelToken | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/bicycleModels";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<number> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201: any = null;
            let resultData201  = _responseText;
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return Promise.resolve<number>(result201);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number>(null as any);
    }

    get(bicycleModelId: number , cancelToken?: CancelToken | undefined): Promise<BicycleModelDto> {
        let url_ = this.baseUrl + "/api/bicycleModels/{bicycleModelId}";
        if (bicycleModelId === undefined || bicycleModelId === null)
            throw new Error("The parameter 'bicycleModelId' must be defined.");
        url_ = url_.replace("{bicycleModelId}", encodeURIComponent("" + bicycleModelId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<BicycleModelDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = BicycleModelDto.fromJS(resultData200);
            return Promise.resolve<BicycleModelDto>(result200);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BicycleModelDto>(null as any);
    }

    update(bicycleModelId: number, command: UpdateBicycleModelCommand , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/bicycleModels/{bicycleModelId}";
        if (bicycleModelId === undefined || bicycleModelId === null)
            throw new Error("The parameter 'bicycleModelId' must be defined.");
        url_ = url_.replace("{bicycleModelId}", encodeURIComponent("" + bicycleModelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    delete(bicycleModelId: number, command: DeleteBicycleModelsCommand , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/bicycleModels/{bicycleModelId}";
        if (bicycleModelId === undefined || bicycleModelId === null)
            throw new Error("The parameter 'bicycleModelId' must be defined.");
        url_ = url_.replace("{bicycleModelId}", encodeURIComponent("" + bicycleModelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "DELETE",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export class ShortBicycleDto implements IShortBicycleDto {
    id?: number;
    manufactureDate?: Date;
    isWrittenOff?: boolean;
    modelId?: number;

    constructor(data?: IShortBicycleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.manufactureDate = _data["manufactureDate"] ? new Date(_data["manufactureDate"].toString()) : <any>undefined;
            this.isWrittenOff = _data["isWrittenOff"];
            this.modelId = _data["modelId"];
        }
    }

    static fromJS(data: any): ShortBicycleDto {
        data = typeof data === 'object' ? data : {};
        let result = new ShortBicycleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["manufactureDate"] = this.manufactureDate ? this.manufactureDate.toISOString() : <any>undefined;
        data["isWrittenOff"] = this.isWrittenOff;
        data["modelId"] = this.modelId;
        return data;
    }
}

export interface IShortBicycleDto {
    id?: number;
    manufactureDate?: Date;
    isWrittenOff?: boolean;
    modelId?: number;
}

export class FullBicycleDto implements IFullBicycleDto {
    id?: number;
    manufactureDate?: Date;
    isWrittenOff?: boolean;
    rentalPointAddress?: AddressDto;
    model?: BicycleModelDto;

    constructor(data?: IFullBicycleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.manufactureDate = _data["manufactureDate"] ? new Date(_data["manufactureDate"].toString()) : <any>undefined;
            this.isWrittenOff = _data["isWrittenOff"];
            this.rentalPointAddress = _data["rentalPointAddress"] ? AddressDto.fromJS(_data["rentalPointAddress"]) : <any>undefined;
            this.model = _data["model"] ? BicycleModelDto.fromJS(_data["model"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FullBicycleDto {
        data = typeof data === 'object' ? data : {};
        let result = new FullBicycleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["manufactureDate"] = this.manufactureDate ? this.manufactureDate.toISOString() : <any>undefined;
        data["isWrittenOff"] = this.isWrittenOff;
        data["rentalPointAddress"] = this.rentalPointAddress ? this.rentalPointAddress.toJSON() : <any>undefined;
        data["model"] = this.model ? this.model.toJSON() : <any>undefined;
        return data;
    }
}

export interface IFullBicycleDto {
    id?: number;
    manufactureDate?: Date;
    isWrittenOff?: boolean;
    rentalPointAddress?: AddressDto;
    model?: BicycleModelDto;
}

export class AddressDto implements IAddressDto {
    country!: string;
    region!: string;
    city?: string | undefined;
    street?: string | undefined;

    constructor(data?: IAddressDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.country = _data["country"];
            this.region = _data["region"];
            this.city = _data["city"];
            this.street = _data["street"];
        }
    }

    static fromJS(data: any): AddressDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddressDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["country"] = this.country;
        data["region"] = this.region;
        data["city"] = this.city;
        data["street"] = this.street;
        return data;
    }
}

export interface IAddressDto {
    country: string;
    region: string;
    city?: string | undefined;
    street?: string | undefined;
}

export class BicycleModelDto implements IBicycleModelDto {
    id?: number;
    name?: string;
    lifeTimeYears?: number;
    manufacturerAddress?: AddressDto;

    constructor(data?: IBicycleModelDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.lifeTimeYears = _data["lifeTimeYears"];
            this.manufacturerAddress = _data["manufacturerAddress"] ? AddressDto.fromJS(_data["manufacturerAddress"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BicycleModelDto {
        data = typeof data === 'object' ? data : {};
        let result = new BicycleModelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["lifeTimeYears"] = this.lifeTimeYears;
        data["manufacturerAddress"] = this.manufacturerAddress ? this.manufacturerAddress.toJSON() : <any>undefined;
        return data;
    }
}

export interface IBicycleModelDto {
    id?: number;
    name?: string;
    lifeTimeYears?: number;
    manufacturerAddress?: AddressDto;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
}

export class CreateBicycleCommand implements ICreateBicycleCommand {
    modelId!: number;
    manufactureDate!: Date;
    isWrittenOff!: boolean;
    rentalPointAddress!: AddressDto;

    constructor(data?: ICreateBicycleCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.rentalPointAddress = new AddressDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.modelId = _data["modelId"];
            this.manufactureDate = _data["manufactureDate"] ? new Date(_data["manufactureDate"].toString()) : <any>undefined;
            this.isWrittenOff = _data["isWrittenOff"];
            this.rentalPointAddress = _data["rentalPointAddress"] ? AddressDto.fromJS(_data["rentalPointAddress"]) : new AddressDto();
        }
    }

    static fromJS(data: any): CreateBicycleCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBicycleCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelId"] = this.modelId;
        data["manufactureDate"] = this.manufactureDate ? this.manufactureDate.toISOString() : <any>undefined;
        data["isWrittenOff"] = this.isWrittenOff;
        data["rentalPointAddress"] = this.rentalPointAddress ? this.rentalPointAddress.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICreateBicycleCommand {
    modelId: number;
    manufactureDate: Date;
    isWrittenOff: boolean;
    rentalPointAddress: AddressDto;
}

export class UpdateBicycleCommand implements IUpdateBicycleCommand {
    id!: number;
    modelId!: number;
    manufactureDate!: Date;
    isWrittenOff!: boolean;
    rentalPointAddress!: AddressDto;

    constructor(data?: IUpdateBicycleCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.rentalPointAddress = new AddressDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.manufactureDate = _data["manufactureDate"] ? new Date(_data["manufactureDate"].toString()) : <any>undefined;
            this.isWrittenOff = _data["isWrittenOff"];
            this.rentalPointAddress = _data["rentalPointAddress"] ? AddressDto.fromJS(_data["rentalPointAddress"]) : new AddressDto();
        }
    }

    static fromJS(data: any): UpdateBicycleCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBicycleCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["manufactureDate"] = this.manufactureDate ? this.manufactureDate.toISOString() : <any>undefined;
        data["isWrittenOff"] = this.isWrittenOff;
        data["rentalPointAddress"] = this.rentalPointAddress ? this.rentalPointAddress.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUpdateBicycleCommand {
    id: number;
    modelId: number;
    manufactureDate: Date;
    isWrittenOff: boolean;
    rentalPointAddress: AddressDto;
}

export class DeleteBicycleCommand implements IDeleteBicycleCommand {
    id!: number;

    constructor(data?: IDeleteBicycleCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteBicycleCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteBicycleCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteBicycleCommand {
    id: number;
}

export class CreateBicycleModelCommand implements ICreateBicycleModelCommand {
    name!: string;
    lifeTimeYears!: number;
    manufacturerAddress!: AddressDto;

    constructor(data?: ICreateBicycleModelCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.manufacturerAddress = new AddressDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.lifeTimeYears = _data["lifeTimeYears"];
            this.manufacturerAddress = _data["manufacturerAddress"] ? AddressDto.fromJS(_data["manufacturerAddress"]) : new AddressDto();
        }
    }

    static fromJS(data: any): CreateBicycleModelCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBicycleModelCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["lifeTimeYears"] = this.lifeTimeYears;
        data["manufacturerAddress"] = this.manufacturerAddress ? this.manufacturerAddress.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICreateBicycleModelCommand {
    name: string;
    lifeTimeYears: number;
    manufacturerAddress: AddressDto;
}

export class UpdateBicycleModelCommand implements IUpdateBicycleModelCommand {
    id!: number;
    name!: string;
    lifeTimeYears!: number;

    constructor(data?: IUpdateBicycleModelCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.lifeTimeYears = _data["lifeTimeYears"];
        }
    }

    static fromJS(data: any): UpdateBicycleModelCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBicycleModelCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["lifeTimeYears"] = this.lifeTimeYears;
        return data;
    }
}

export interface IUpdateBicycleModelCommand {
    id: number;
    name: string;
    lifeTimeYears: number;
}

export class DeleteBicycleModelsCommand implements IDeleteBicycleModelsCommand {
    id!: number;

    constructor(data?: IDeleteBicycleModelsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteBicycleModelsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteBicycleModelsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteBicycleModelsCommand {
    id: number;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}